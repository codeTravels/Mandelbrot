package com.mycompany.mandelbrot;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.List;

/**
 *
 * @author Cory
 */
public class Picture extends javax.swing.JPanel
{

    /**
     * Creates new form Picture
     */
    public Picture()
    {
        this(1, 1);
    }
    private BufferedImage image;

    Picture(int N, int N0)
    {
        initComponents();
        this.image = new BufferedImage(N, N0, BufferedImage.TYPE_INT_ARGB);
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        // Draw image centered.
        int x = (getWidth() - image.getWidth()) / 2;
        int y = (getHeight() - image.getHeight()) / 2;
        g.drawImage(image, x, y, this);
    }

    void setInputOptions(InputOptions options)
    {
        System.out.println("options = " + options);
        double xc = options.getXc();
        double yc = options.getYc();
        double size = options.getSize();

        int N = options.getN();   // create N-by-N image
        int max = options.getMax();   // maximum number of iterations

        this.image = new BufferedImage(N, N, BufferedImage.TYPE_INT_ARGB);

        List<Color> colors = ColorMap.generateRandom();
        for (int column = 0; column < N; column++)
        {
            for (int row = 0; row < N; row++)
            {
                double x0 = xc - size / 2 + size * column / N;
                double y0 = yc - size / 2 + size * row / N;
                ComplexNumber z0 = new ComplexNumber(x0, y0);
                int colorIndex = max - mand(z0, max);

                setColor(column, N - 1 - row, colors.get(colorIndex));
            }
        }
        repaint();
    }

    void setColor(int x, int y, Color color)
    {
        this.image.setRGB(x, y, color.getRGB());
    }

    /**
     * return number of iterations to check if c = a + ib is in Mandelbrot set
     *
     * @param z0
     * @param max
     * @return
     */
    public static int mand(ComplexNumber z0, int max)
    {
        ComplexNumber z = z0;
        for (int t = 0; t < max; t++)
        {
            if (z.abs() > 2.0)
            {
                return t;
            }
            z = z.times(z).plus(z0);
        }
        return max;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
